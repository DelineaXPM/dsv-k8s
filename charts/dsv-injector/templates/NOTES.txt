{{- $name := (include "dsv.dnsname" .) -}}
{{- $port := int .Values.webhookPort -}}
{{- $uri := trimAll "/" .Values.webhookUri -}}
✨ Deployed: {{ include "dsv.fullname" . }}

📂 Namepsace: {{ .Release.Namespace }}
{{ if eq .Values.service.type "ExternalName" }}
🔗 The cluster will call the webhook at {{ printf "https://%s:%d/%s" .Values.externalName $port $uri }}

❗ IMPORTANT: the endpoint certificate must have Subject Alternative Name '{{ $name }}'

🔐 The certificate chain that the cluster will use to verify the webhook is:
{{- $cert := .Values.caBundle | b64dec -}}
{{- $certs := split "\\n" $cert -}}
{{ range $cert := $certs }}
{{ $cert }}
{{ end }}
{{ else }}
🔗 The cluster will call the webhook at {{ printf "https://%s:%d/%s" $name $port $uri }}
{{ end }}

{{- if .Values.configmap }}
⚙️ ConfigMap created: {{ include "dsv.fullname" . }}-configmap
{{ else }}
➖ no configmap detected, defaults used for logging level and any other configmap values
{{ end }}


{{- $tlsSecret := lookup "v1" "Secret" .Release.Namespace (printf "%s-tls" (include "dsv.name" .)) -}}
{{- $recreateSelfSignedCertThreshold := default 90 .Values.recreateSelfSignedCertThreshold | int -}}
{{- $needsRecreate := false -}}
{{- if $tlsSecret }}
  {{- $cert := $tlsSecret.data.cert | b64dec | fromYaml -}}
  {{- if and $cert (lt (now | date "2006-01-02") (dateModify (now | date "2006-01-02") (printf "+%dh" (mul $recreateSelfSignedCertThreshold 24)))) }}
    {{- $needsRecreate = true -}}
    ❗❗❗ Cert expiration shows expiring within threshold: [$recreateSelfSignedCertThreshold] days, so will be recreated.
  {{- else -}}
    ✔️ Cert shows expiration greater than threshold of [$recreateSelfSignedCertThreshold].
  {{- end -}}
{{- end -}}
